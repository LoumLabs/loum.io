"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wavesurfer.js";
exports.ids = ["vendor-chunks/wavesurfer.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/wavesurfer.js/dist/wavesurfer.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/wavesurfer.js/dist/wavesurfer.esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ u)\n/* harmony export */ });\nfunction t(t, e, i, s) {\n    return new (i || (i = Promise))(function(n, r) {\n        function o(t) {\n            try {\n                h(s.next(t));\n            } catch (t) {\n                r(t);\n            }\n        }\n        function a(t) {\n            try {\n                h(s.throw(t));\n            } catch (t) {\n                r(t);\n            }\n        }\n        function h(t) {\n            var e;\n            t.done ? n(t.value) : (e = t.value, e instanceof i ? e : new i(function(t) {\n                t(e);\n            })).then(o, a);\n        }\n        h((s = s.apply(t, e || [])).next());\n    });\n}\n\"function\" == typeof SuppressedError && SuppressedError;\nclass e {\n    constructor(){\n        this.listeners = {};\n    }\n    on(t, e, i) {\n        if (this.listeners[t] || (this.listeners[t] = new Set), this.listeners[t].add(e), null == i ? void 0 : i.once) {\n            const i = ()=>{\n                this.un(t, i), this.un(t, e);\n            };\n            return this.on(t, i), i;\n        }\n        return ()=>this.un(t, e);\n    }\n    un(t, e) {\n        var i;\n        null === (i = this.listeners[t]) || void 0 === i || i.delete(e);\n    }\n    once(t, e) {\n        return this.on(t, e, {\n            once: !0\n        });\n    }\n    unAll() {\n        this.listeners = {};\n    }\n    emit(t, ...e) {\n        this.listeners[t] && this.listeners[t].forEach((t)=>t(...e));\n    }\n}\nconst i = {\n    decode: function(e, i) {\n        return t(this, void 0, void 0, function*() {\n            const t = new AudioContext({\n                sampleRate: i\n            });\n            return t.decodeAudioData(e).finally(()=>t.close());\n        });\n    },\n    createBuffer: function(t, e) {\n        return \"number\" == typeof t[0] && (t = [\n            t\n        ]), function(t) {\n            const e = t[0];\n            if (e.some((t)=>t > 1 || t < -1)) {\n                const i = e.length;\n                let s = 0;\n                for(let t = 0; t < i; t++){\n                    const i = Math.abs(e[t]);\n                    i > s && (s = i);\n                }\n                for (const e of t)for(let t = 0; t < i; t++)e[t] /= s;\n            }\n        }(t), {\n            duration: e,\n            length: t[0].length,\n            sampleRate: t[0].length / e,\n            numberOfChannels: t.length,\n            getChannelData: (e)=>null == t ? void 0 : t[e],\n            copyFromChannel: AudioBuffer.prototype.copyFromChannel,\n            copyToChannel: AudioBuffer.prototype.copyToChannel\n        };\n    }\n};\nfunction s(t, e) {\n    const i = e.xmlns ? document.createElementNS(e.xmlns, t) : document.createElement(t);\n    for (const [t, n] of Object.entries(e))if (\"children\" === t) for (const [t, n] of Object.entries(e))\"string\" == typeof n ? i.appendChild(document.createTextNode(n)) : i.appendChild(s(t, n));\n    else \"style\" === t ? Object.assign(i.style, n) : \"textContent\" === t ? i.textContent = n : i.setAttribute(t, n.toString());\n    return i;\n}\nfunction n(t, e, i) {\n    const n = s(t, e || {});\n    return null == i || i.appendChild(n), n;\n}\nvar r = Object.freeze({\n    __proto__: null,\n    createElement: n,\n    default: n\n});\nconst o = {\n    fetchBlob: function(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            const n = yield fetch(e, s);\n            if (n.status >= 400) throw new Error(`Failed to fetch ${e}: ${n.status} (${n.statusText})`);\n            return function(e, i) {\n                t(this, void 0, void 0, function*() {\n                    if (!e.body || !e.headers) return;\n                    const s = e.body.getReader(), n = Number(e.headers.get(\"Content-Length\")) || 0;\n                    let r = 0;\n                    const o = (e)=>t(this, void 0, void 0, function*() {\n                            r += (null == e ? void 0 : e.length) || 0;\n                            const t = Math.round(r / n * 100);\n                            i(t);\n                        }), a = ()=>t(this, void 0, void 0, function*() {\n                            let t;\n                            try {\n                                t = yield s.read();\n                            } catch (t) {\n                                return;\n                            }\n                            t.done || (o(t.value), yield a());\n                        });\n                    a();\n                });\n            }(n.clone(), i), n.blob();\n        });\n    }\n};\nclass a extends e {\n    constructor(t){\n        super(), this.isExternalMedia = !1, t.media ? (this.media = t.media, this.isExternalMedia = !0) : this.media = document.createElement(\"audio\"), t.mediaControls && (this.media.controls = !0), t.autoplay && (this.media.autoplay = !0), null != t.playbackRate && this.onMediaEvent(\"canplay\", ()=>{\n            null != t.playbackRate && (this.media.playbackRate = t.playbackRate);\n        }, {\n            once: !0\n        });\n    }\n    onMediaEvent(t, e, i) {\n        return this.media.addEventListener(t, e, i), ()=>this.media.removeEventListener(t, e, i);\n    }\n    getSrc() {\n        return this.media.currentSrc || this.media.src || \"\";\n    }\n    revokeSrc() {\n        const t = this.getSrc();\n        t.startsWith(\"blob:\") && URL.revokeObjectURL(t);\n    }\n    canPlayType(t) {\n        return \"\" !== this.media.canPlayType(t);\n    }\n    setSrc(t, e) {\n        const i = this.getSrc();\n        if (t && i === t) return;\n        this.revokeSrc();\n        const s = e instanceof Blob && (this.canPlayType(e.type) || !t) ? URL.createObjectURL(e) : t;\n        i && (this.media.src = \"\");\n        try {\n            this.media.src = s;\n        } catch (e) {\n            this.media.src = t;\n        }\n    }\n    destroy() {\n        this.isExternalMedia || (this.media.pause(), this.media.remove(), this.revokeSrc(), this.media.src = \"\", this.media.load());\n    }\n    setMediaElement(t) {\n        this.media = t;\n    }\n    play() {\n        return t(this, void 0, void 0, function*() {\n            return this.media.play();\n        });\n    }\n    pause() {\n        this.media.pause();\n    }\n    isPlaying() {\n        return !this.media.paused && !this.media.ended;\n    }\n    setTime(t) {\n        this.media.currentTime = Math.max(0, Math.min(t, this.getDuration()));\n    }\n    getDuration() {\n        return this.media.duration;\n    }\n    getCurrentTime() {\n        return this.media.currentTime;\n    }\n    getVolume() {\n        return this.media.volume;\n    }\n    setVolume(t) {\n        this.media.volume = t;\n    }\n    getMuted() {\n        return this.media.muted;\n    }\n    setMuted(t) {\n        this.media.muted = t;\n    }\n    getPlaybackRate() {\n        return this.media.playbackRate;\n    }\n    isSeeking() {\n        return this.media.seeking;\n    }\n    setPlaybackRate(t, e) {\n        null != e && (this.media.preservesPitch = e), this.media.playbackRate = t;\n    }\n    getMediaElement() {\n        return this.media;\n    }\n    setSinkId(t) {\n        return this.media.setSinkId(t);\n    }\n}\nclass h extends e {\n    constructor(t, e){\n        super(), this.timeouts = [], this.isScrollable = !1, this.audioData = null, this.resizeObserver = null, this.lastContainerWidth = 0, this.isDragging = !1, this.subscriptions = [], this.unsubscribeOnScroll = [], this.subscriptions = [], this.options = t;\n        const i = this.parentFromOptionsContainer(t.container);\n        this.parent = i;\n        const [s, n] = this.initHtml();\n        i.appendChild(s), this.container = s, this.scrollContainer = n.querySelector(\".scroll\"), this.wrapper = n.querySelector(\".wrapper\"), this.canvasWrapper = n.querySelector(\".canvases\"), this.progressWrapper = n.querySelector(\".progress\"), this.cursor = n.querySelector(\".cursor\"), e && n.appendChild(e), this.initEvents();\n    }\n    parentFromOptionsContainer(t) {\n        let e;\n        if (\"string\" == typeof t ? e = document.querySelector(t) : t instanceof HTMLElement && (e = t), !e) throw new Error(\"Container not found\");\n        return e;\n    }\n    initEvents() {\n        const t = (t)=>{\n            const e = this.wrapper.getBoundingClientRect(), i = t.clientX - e.left, s = t.clientY - e.top;\n            return [\n                i / e.width,\n                s / e.height\n            ];\n        };\n        if (this.wrapper.addEventListener(\"click\", (e)=>{\n            const [i, s] = t(e);\n            this.emit(\"click\", i, s);\n        }), this.wrapper.addEventListener(\"dblclick\", (e)=>{\n            const [i, s] = t(e);\n            this.emit(\"dblclick\", i, s);\n        }), !0 !== this.options.dragToSeek && \"object\" != typeof this.options.dragToSeek || this.initDrag(), this.scrollContainer.addEventListener(\"scroll\", ()=>{\n            const { scrollLeft: t, scrollWidth: e, clientWidth: i } = this.scrollContainer, s = t / e, n = (t + i) / e;\n            this.emit(\"scroll\", s, n, t, t + i);\n        }), \"function\" == typeof ResizeObserver) {\n            const t = this.createDelay(100);\n            this.resizeObserver = new ResizeObserver(()=>{\n                t().then(()=>this.onContainerResize()).catch(()=>{});\n            }), this.resizeObserver.observe(this.scrollContainer);\n        }\n    }\n    onContainerResize() {\n        const t = this.parent.clientWidth;\n        t === this.lastContainerWidth && \"auto\" !== this.options.height || (this.lastContainerWidth = t, this.reRender());\n    }\n    initDrag() {\n        this.subscriptions.push(function(t, e, i, s, n = 3, r = 0, o = 100) {\n            if (!t) return ()=>{};\n            const a = matchMedia(\"(pointer: coarse)\").matches;\n            let h = ()=>{};\n            const l = (l)=>{\n                if (l.button !== r) return;\n                l.preventDefault(), l.stopPropagation();\n                let d = l.clientX, c = l.clientY, u = !1;\n                const p = Date.now(), m = (s)=>{\n                    if (s.preventDefault(), s.stopPropagation(), a && Date.now() - p < o) return;\n                    const r = s.clientX, h = s.clientY, l = r - d, m = h - c;\n                    if (u || Math.abs(l) > n || Math.abs(m) > n) {\n                        const s = t.getBoundingClientRect(), { left: n, top: o } = s;\n                        u || (null == i || i(d - n, c - o), u = !0), e(l, m, r - n, h - o), d = r, c = h;\n                    }\n                }, f = (e)=>{\n                    if (u) {\n                        const i = e.clientX, n = e.clientY, r = t.getBoundingClientRect(), { left: o, top: a } = r;\n                        null == s || s(i - o, n - a);\n                    }\n                    h();\n                }, g = (t)=>{\n                    t.relatedTarget && t.relatedTarget !== document.documentElement || f(t);\n                }, v = (t)=>{\n                    u && (t.stopPropagation(), t.preventDefault());\n                }, b = (t)=>{\n                    u && t.preventDefault();\n                };\n                document.addEventListener(\"pointermove\", m), document.addEventListener(\"pointerup\", f), document.addEventListener(\"pointerout\", g), document.addEventListener(\"pointercancel\", g), document.addEventListener(\"touchmove\", b, {\n                    passive: !1\n                }), document.addEventListener(\"click\", v, {\n                    capture: !0\n                }), h = ()=>{\n                    document.removeEventListener(\"pointermove\", m), document.removeEventListener(\"pointerup\", f), document.removeEventListener(\"pointerout\", g), document.removeEventListener(\"pointercancel\", g), document.removeEventListener(\"touchmove\", b), setTimeout(()=>{\n                        document.removeEventListener(\"click\", v, {\n                            capture: !0\n                        });\n                    }, 10);\n                };\n            };\n            return t.addEventListener(\"pointerdown\", l), ()=>{\n                h(), t.removeEventListener(\"pointerdown\", l);\n            };\n        }(this.wrapper, (t, e, i)=>{\n            this.emit(\"drag\", Math.max(0, Math.min(1, i / this.wrapper.getBoundingClientRect().width)));\n        }, (t)=>{\n            this.isDragging = !0, this.emit(\"dragstart\", Math.max(0, Math.min(1, t / this.wrapper.getBoundingClientRect().width)));\n        }, (t)=>{\n            this.isDragging = !1, this.emit(\"dragend\", Math.max(0, Math.min(1, t / this.wrapper.getBoundingClientRect().width)));\n        }));\n    }\n    getHeight(t, e) {\n        var i;\n        const s = (null === (i = this.audioData) || void 0 === i ? void 0 : i.numberOfChannels) || 1;\n        if (null == t) return 128;\n        if (!isNaN(Number(t))) return Number(t);\n        if (\"auto\" === t) {\n            const t = this.parent.clientHeight || 128;\n            return (null == e ? void 0 : e.every((t)=>!t.overlay)) ? t / s : t;\n        }\n        return 128;\n    }\n    initHtml() {\n        const t = document.createElement(\"div\"), e = t.attachShadow({\n            mode: \"open\"\n        }), i = this.options.cspNonce && \"string\" == typeof this.options.cspNonce ? this.options.cspNonce.replace(/\"/g, \"\") : \"\";\n        return e.innerHTML = `\\n      <style${i ? ` nonce=\"${i}\"` : \"\"}>\\n        :host {\\n          user-select: none;\\n          min-width: 1px;\\n        }\\n        :host audio {\\n          display: block;\\n          width: 100%;\\n        }\\n        :host .scroll {\\n          overflow-x: auto;\\n          overflow-y: hidden;\\n          width: 100%;\\n          position: relative;\\n        }\\n        :host .noScrollbar {\\n          scrollbar-color: transparent;\\n          scrollbar-width: none;\\n        }\\n        :host .noScrollbar::-webkit-scrollbar {\\n          display: none;\\n          -webkit-appearance: none;\\n        }\\n        :host .wrapper {\\n          position: relative;\\n          overflow: visible;\\n          z-index: 2;\\n        }\\n        :host .canvases {\\n          min-height: ${this.getHeight(this.options.height, this.options.splitChannels)}px;\\n        }\\n        :host .canvases > div {\\n          position: relative;\\n        }\\n        :host canvas {\\n          display: block;\\n          position: absolute;\\n          top: 0;\\n          image-rendering: pixelated;\\n        }\\n        :host .progress {\\n          pointer-events: none;\\n          position: absolute;\\n          z-index: 2;\\n          top: 0;\\n          left: 0;\\n          width: 0;\\n          height: 100%;\\n          overflow: hidden;\\n        }\\n        :host .progress > div {\\n          position: relative;\\n        }\\n        :host .cursor {\\n          pointer-events: none;\\n          position: absolute;\\n          z-index: 5;\\n          top: 0;\\n          left: 0;\\n          height: 100%;\\n          border-radius: 2px;\\n        }\\n      </style>\\n\\n      <div class=\"scroll\" part=\"scroll\">\\n        <div class=\"wrapper\" part=\"wrapper\">\\n          <div class=\"canvases\" part=\"canvases\"></div>\\n          <div class=\"progress\" part=\"progress\"></div>\\n          <div class=\"cursor\" part=\"cursor\"></div>\\n        </div>\\n      </div>\\n    `, [\n            t,\n            e\n        ];\n    }\n    setOptions(t) {\n        if (this.options.container !== t.container) {\n            const e = this.parentFromOptionsContainer(t.container);\n            e.appendChild(this.container), this.parent = e;\n        }\n        !0 !== t.dragToSeek && \"object\" != typeof this.options.dragToSeek || this.initDrag(), this.options = t, this.reRender();\n    }\n    getWrapper() {\n        return this.wrapper;\n    }\n    getWidth() {\n        return this.scrollContainer.clientWidth;\n    }\n    getScroll() {\n        return this.scrollContainer.scrollLeft;\n    }\n    setScroll(t) {\n        this.scrollContainer.scrollLeft = t;\n    }\n    setScrollPercentage(t) {\n        const { scrollWidth: e } = this.scrollContainer, i = e * t;\n        this.setScroll(i);\n    }\n    destroy() {\n        var t, e;\n        this.subscriptions.forEach((t)=>t()), this.container.remove(), null === (t = this.resizeObserver) || void 0 === t || t.disconnect(), null === (e = this.unsubscribeOnScroll) || void 0 === e || e.forEach((t)=>t()), this.unsubscribeOnScroll = [];\n    }\n    createDelay(t = 10) {\n        let e, i;\n        const s = ()=>{\n            e && clearTimeout(e), i && i();\n        };\n        return this.timeouts.push(s), ()=>new Promise((n, r)=>{\n                s(), i = r, e = setTimeout(()=>{\n                    e = void 0, i = void 0, n();\n                }, t);\n            });\n    }\n    convertColorValues(t) {\n        if (!Array.isArray(t)) return t || \"\";\n        if (t.length < 2) return t[0] || \"\";\n        const e = document.createElement(\"canvas\"), i = e.getContext(\"2d\"), s = e.height * (window.devicePixelRatio || 1), n = i.createLinearGradient(0, 0, 0, s), r = 1 / (t.length - 1);\n        return t.forEach((t, e)=>{\n            const i = e * r;\n            n.addColorStop(i, t);\n        }), n;\n    }\n    getPixelRatio() {\n        return Math.max(1, window.devicePixelRatio || 1);\n    }\n    renderBarWaveform(t, e, i, s) {\n        const n = t[0], r = t[1] || t[0], o = n.length, { width: a, height: h } = i.canvas, l = h / 2, d = this.getPixelRatio(), c = e.barWidth ? e.barWidth * d : 1, u = e.barGap ? e.barGap * d : e.barWidth ? c / 2 : 0, p = e.barRadius || 0, m = a / (c + u) / o, f = p && \"roundRect\" in i ? \"roundRect\" : \"rect\";\n        i.beginPath();\n        let g = 0, v = 0, b = 0;\n        for(let t = 0; t <= o; t++){\n            const o = Math.round(t * m);\n            if (o > g) {\n                const t = Math.round(v * l * s), n = t + Math.round(b * l * s) || 1;\n                let r = l - t;\n                \"top\" === e.barAlign ? r = 0 : \"bottom\" === e.barAlign && (r = h - n), i[f](g * (c + u), r, c, n, p), g = o, v = 0, b = 0;\n            }\n            const a = Math.abs(n[t] || 0), d = Math.abs(r[t] || 0);\n            a > v && (v = a), d > b && (b = d);\n        }\n        i.fill(), i.closePath();\n    }\n    renderLineWaveform(t, e, i, s) {\n        const n = (e)=>{\n            const n = t[e] || t[0], r = n.length, { height: o } = i.canvas, a = o / 2, h = i.canvas.width / r;\n            i.moveTo(0, a);\n            let l = 0, d = 0;\n            for(let t = 0; t <= r; t++){\n                const r = Math.round(t * h);\n                if (r > l) {\n                    const t = a + (Math.round(d * a * s) || 1) * (0 === e ? -1 : 1);\n                    i.lineTo(l, t), l = r, d = 0;\n                }\n                const o = Math.abs(n[t] || 0);\n                o > d && (d = o);\n            }\n            i.lineTo(l, a);\n        };\n        i.beginPath(), n(0), n(1), i.fill(), i.closePath();\n    }\n    renderWaveform(t, e, i) {\n        if (i.fillStyle = this.convertColorValues(e.waveColor), e.renderFunction) return void e.renderFunction(t, i);\n        let s = e.barHeight || 1;\n        if (e.normalize) {\n            const e = Array.from(t[0]).reduce((t, e)=>Math.max(t, Math.abs(e)), 0);\n            s = e ? 1 / e : 1;\n        }\n        e.barWidth || e.barGap || e.barAlign ? this.renderBarWaveform(t, e, i, s) : this.renderLineWaveform(t, e, i, s);\n    }\n    renderSingleCanvas(t, e, i, s, n, r, o) {\n        const a = this.getPixelRatio(), h = document.createElement(\"canvas\");\n        h.width = Math.round(i * a), h.height = Math.round(s * a), h.style.width = `${i}px`, h.style.height = `${s}px`, h.style.left = `${Math.round(n)}px`, r.appendChild(h);\n        const l = h.getContext(\"2d\");\n        if (this.renderWaveform(t, e, l), h.width > 0 && h.height > 0) {\n            const t = h.cloneNode(), i = t.getContext(\"2d\");\n            i.drawImage(h, 0, 0), i.globalCompositeOperation = \"source-in\", i.fillStyle = this.convertColorValues(e.progressColor), i.fillRect(0, 0, h.width, h.height), o.appendChild(t);\n        }\n    }\n    renderMultiCanvas(t, e, i, s, n, r) {\n        const o = this.getPixelRatio(), { clientWidth: a } = this.scrollContainer, l = i / o;\n        let d = Math.min(h.MAX_CANVAS_WIDTH, a, l), c = {};\n        if (0 === d) return;\n        if (e.barWidth || e.barGap) {\n            const t = e.barWidth || .5, i = t + (e.barGap || t / 2);\n            d % i != 0 && (d = Math.floor(d / i) * i);\n        }\n        const u = (i)=>{\n            if (i < 0 || i >= p) return;\n            if (c[i]) return;\n            c[i] = !0;\n            const o = i * d, a = Math.min(l - o, d);\n            if (a <= 0) return;\n            const h = t.map((t)=>{\n                const e = Math.floor(o / l * t.length), i = Math.floor((o + a) / l * t.length);\n                return t.slice(e, i);\n            });\n            this.renderSingleCanvas(h, e, a, s, o, n, r);\n        }, p = Math.ceil(l / d);\n        if (!this.isScrollable) {\n            for(let t = 0; t < p; t++)u(t);\n            return;\n        }\n        const m = this.scrollContainer.scrollLeft / l, f = Math.floor(m * p);\n        if (u(f - 1), u(f), u(f + 1), p > 1) {\n            const t = this.on(\"scroll\", ()=>{\n                const { scrollLeft: t } = this.scrollContainer, e = Math.floor(t / l * p);\n                Object.keys(c).length > h.MAX_NODES && (n.innerHTML = \"\", r.innerHTML = \"\", c = {}), u(e - 1), u(e), u(e + 1);\n            });\n            this.unsubscribeOnScroll.push(t);\n        }\n    }\n    renderChannel(t, e, i, s) {\n        var { overlay: n } = e, r = function(t, e) {\n            var i = {};\n            for(var s in t)Object.prototype.hasOwnProperty.call(t, s) && e.indexOf(s) < 0 && (i[s] = t[s]);\n            if (null != t && \"function\" == typeof Object.getOwnPropertySymbols) {\n                var n = 0;\n                for(s = Object.getOwnPropertySymbols(t); n < s.length; n++)e.indexOf(s[n]) < 0 && Object.prototype.propertyIsEnumerable.call(t, s[n]) && (i[s[n]] = t[s[n]]);\n            }\n            return i;\n        }(e, [\n            \"overlay\"\n        ]);\n        const o = document.createElement(\"div\"), a = this.getHeight(r.height, r.splitChannels);\n        o.style.height = `${a}px`, n && s > 0 && (o.style.marginTop = `-${a}px`), this.canvasWrapper.style.minHeight = `${a}px`, this.canvasWrapper.appendChild(o);\n        const h = o.cloneNode();\n        this.progressWrapper.appendChild(h), this.renderMultiCanvas(t, r, i, a, o, h);\n    }\n    render(e) {\n        return t(this, void 0, void 0, function*() {\n            var t;\n            this.timeouts.forEach((t)=>t()), this.timeouts = [], this.canvasWrapper.innerHTML = \"\", this.progressWrapper.innerHTML = \"\", null != this.options.width && (this.scrollContainer.style.width = \"number\" == typeof this.options.width ? `${this.options.width}px` : this.options.width);\n            const i = this.getPixelRatio(), s = this.scrollContainer.clientWidth, n = Math.ceil(e.duration * (this.options.minPxPerSec || 0));\n            this.isScrollable = n > s;\n            const r = this.options.fillParent && !this.isScrollable, o = (r ? s : n) * i;\n            if (this.wrapper.style.width = r ? \"100%\" : `${n}px`, this.scrollContainer.style.overflowX = this.isScrollable ? \"auto\" : \"hidden\", this.scrollContainer.classList.toggle(\"noScrollbar\", !!this.options.hideScrollbar), this.cursor.style.backgroundColor = `${this.options.cursorColor || this.options.progressColor}`, this.cursor.style.width = `${this.options.cursorWidth}px`, this.audioData = e, this.emit(\"render\"), this.options.splitChannels) for(let i = 0; i < e.numberOfChannels; i++){\n                const s = Object.assign(Object.assign({}, this.options), null === (t = this.options.splitChannels) || void 0 === t ? void 0 : t[i]);\n                this.renderChannel([\n                    e.getChannelData(i)\n                ], s, o, i);\n            }\n            else {\n                const t = [\n                    e.getChannelData(0)\n                ];\n                e.numberOfChannels > 1 && t.push(e.getChannelData(1)), this.renderChannel(t, this.options, o, 0);\n            }\n            Promise.resolve().then(()=>this.emit(\"rendered\"));\n        });\n    }\n    reRender() {\n        if (this.unsubscribeOnScroll.forEach((t)=>t()), this.unsubscribeOnScroll = [], !this.audioData) return;\n        const { scrollWidth: t } = this.scrollContainer, { right: e } = this.progressWrapper.getBoundingClientRect();\n        if (this.render(this.audioData), this.isScrollable && t !== this.scrollContainer.scrollWidth) {\n            const { right: t } = this.progressWrapper.getBoundingClientRect();\n            let i = t - e;\n            i *= 2, i = i < 0 ? Math.floor(i) : Math.ceil(i), i /= 2, this.scrollContainer.scrollLeft += i;\n        }\n    }\n    zoom(t) {\n        this.options.minPxPerSec = t, this.reRender();\n    }\n    scrollIntoView(t, e = !1) {\n        const { scrollLeft: i, scrollWidth: s, clientWidth: n } = this.scrollContainer, r = t * s, o = i, a = i + n, h = n / 2;\n        if (this.isDragging) {\n            const t = 30;\n            r + t > a ? this.scrollContainer.scrollLeft += t : r - t < o && (this.scrollContainer.scrollLeft -= t);\n        } else {\n            (r < o || r > a) && (this.scrollContainer.scrollLeft = r - (this.options.autoCenter ? h : 0));\n            const t = r - i - h;\n            e && this.options.autoCenter && t > 0 && (this.scrollContainer.scrollLeft += Math.min(t, 10));\n        }\n        {\n            const t = this.scrollContainer.scrollLeft, e = t / s, i = (t + n) / s;\n            this.emit(\"scroll\", e, i, t, t + n);\n        }\n    }\n    renderProgress(t, e) {\n        if (isNaN(t)) return;\n        const i = 100 * t;\n        this.canvasWrapper.style.clipPath = `polygon(${i}% 0, 100% 0, 100% 100%, ${i}% 100%)`, this.progressWrapper.style.width = `${i}%`, this.cursor.style.left = `${i}%`, this.cursor.style.transform = `translateX(-${100 === Math.round(i) ? this.options.cursorWidth : 0}px)`, this.isScrollable && this.options.autoScroll && this.scrollIntoView(t, e);\n    }\n    exportImage(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            const t = this.canvasWrapper.querySelectorAll(\"canvas\");\n            if (!t.length) throw new Error(\"No waveform data\");\n            if (\"dataURL\" === s) {\n                const s = Array.from(t).map((t)=>t.toDataURL(e, i));\n                return Promise.resolve(s);\n            }\n            return Promise.all(Array.from(t).map((t)=>new Promise((s, n)=>{\n                    t.toBlob((t)=>{\n                        t ? s(t) : n(new Error(\"Could not export image\"));\n                    }, e, i);\n                })));\n        });\n    }\n}\nh.MAX_CANVAS_WIDTH = 8e3, h.MAX_NODES = 10;\nclass l extends e {\n    constructor(){\n        super(...arguments), this.unsubscribe = ()=>{};\n    }\n    start() {\n        this.unsubscribe = this.on(\"tick\", ()=>{\n            requestAnimationFrame(()=>{\n                this.emit(\"tick\");\n            });\n        }), this.emit(\"tick\");\n    }\n    stop() {\n        this.unsubscribe();\n    }\n    destroy() {\n        this.unsubscribe();\n    }\n}\nclass d extends e {\n    constructor(t = new AudioContext){\n        super(), this.bufferNode = null, this.playStartTime = 0, this.playedDuration = 0, this._muted = !1, this._playbackRate = 1, this._duration = void 0, this.buffer = null, this.currentSrc = \"\", this.paused = !0, this.crossOrigin = null, this.seeking = !1, this.autoplay = !1, this.addEventListener = this.on, this.removeEventListener = this.un, this.audioContext = t, this.gainNode = this.audioContext.createGain(), this.gainNode.connect(this.audioContext.destination);\n    }\n    load() {\n        return t(this, void 0, void 0, function*() {});\n    }\n    get src() {\n        return this.currentSrc;\n    }\n    set src(t) {\n        if (this.currentSrc = t, this._duration = void 0, !t) return this.buffer = null, void this.emit(\"emptied\");\n        fetch(t).then((e)=>{\n            if (e.status >= 400) throw new Error(`Failed to fetch ${t}: ${e.status} (${e.statusText})`);\n            return e.arrayBuffer();\n        }).then((e)=>this.currentSrc !== t ? null : this.audioContext.decodeAudioData(e)).then((e)=>{\n            this.currentSrc === t && (this.buffer = e, this.emit(\"loadedmetadata\"), this.emit(\"canplay\"), this.autoplay && this.play());\n        });\n    }\n    _play() {\n        var t;\n        if (!this.paused) return;\n        this.paused = !1, null === (t = this.bufferNode) || void 0 === t || t.disconnect(), this.bufferNode = this.audioContext.createBufferSource(), this.buffer && (this.bufferNode.buffer = this.buffer), this.bufferNode.playbackRate.value = this._playbackRate, this.bufferNode.connect(this.gainNode);\n        let e = this.playedDuration * this._playbackRate;\n        (e >= this.duration || e < 0) && (e = 0, this.playedDuration = 0), this.bufferNode.start(this.audioContext.currentTime, e), this.playStartTime = this.audioContext.currentTime, this.bufferNode.onended = ()=>{\n            this.currentTime >= this.duration && (this.pause(), this.emit(\"ended\"));\n        };\n    }\n    _pause() {\n        var t;\n        this.paused = !0, null === (t = this.bufferNode) || void 0 === t || t.stop(), this.playedDuration += this.audioContext.currentTime - this.playStartTime;\n    }\n    play() {\n        return t(this, void 0, void 0, function*() {\n            this.paused && (this._play(), this.emit(\"play\"));\n        });\n    }\n    pause() {\n        this.paused || (this._pause(), this.emit(\"pause\"));\n    }\n    stopAt(t) {\n        var e, i;\n        const s = t - this.currentTime;\n        null === (e = this.bufferNode) || void 0 === e || e.stop(this.audioContext.currentTime + s), null === (i = this.bufferNode) || void 0 === i || i.addEventListener(\"ended\", ()=>{\n            this.bufferNode = null, this.pause();\n        }, {\n            once: !0\n        });\n    }\n    setSinkId(e) {\n        return t(this, void 0, void 0, function*() {\n            return this.audioContext.setSinkId(e);\n        });\n    }\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(t) {\n        this._playbackRate = t, this.bufferNode && (this.bufferNode.playbackRate.value = t);\n    }\n    get currentTime() {\n        return (this.paused ? this.playedDuration : this.playedDuration + (this.audioContext.currentTime - this.playStartTime)) * this._playbackRate;\n    }\n    set currentTime(t) {\n        const e = !this.paused;\n        e && this._pause(), this.playedDuration = t / this._playbackRate, e && this._play(), this.emit(\"seeking\"), this.emit(\"timeupdate\");\n    }\n    get duration() {\n        var t, e;\n        return null !== (t = this._duration) && void 0 !== t ? t : (null === (e = this.buffer) || void 0 === e ? void 0 : e.duration) || 0;\n    }\n    set duration(t) {\n        this._duration = t;\n    }\n    get volume() {\n        return this.gainNode.gain.value;\n    }\n    set volume(t) {\n        this.gainNode.gain.value = t, this.emit(\"volumechange\");\n    }\n    get muted() {\n        return this._muted;\n    }\n    set muted(t) {\n        this._muted !== t && (this._muted = t, this._muted ? this.gainNode.disconnect() : this.gainNode.connect(this.audioContext.destination));\n    }\n    canPlayType(t) {\n        return /^(audio|video)\\//.test(t);\n    }\n    getGainNode() {\n        return this.gainNode;\n    }\n    getChannelData() {\n        const t = [];\n        if (!this.buffer) return t;\n        const e = this.buffer.numberOfChannels;\n        for(let i = 0; i < e; i++)t.push(this.buffer.getChannelData(i));\n        return t;\n    }\n}\nconst c = {\n    waveColor: \"#999\",\n    progressColor: \"#555\",\n    cursorWidth: 1,\n    minPxPerSec: 0,\n    fillParent: !0,\n    interact: !0,\n    dragToSeek: !1,\n    autoScroll: !0,\n    autoCenter: !0,\n    sampleRate: 8e3\n};\nclass u extends a {\n    static create(t) {\n        return new u(t);\n    }\n    constructor(t){\n        const e = t.media || (\"WebAudio\" === t.backend ? new d : void 0);\n        super({\n            media: e,\n            mediaControls: t.mediaControls,\n            autoplay: t.autoplay,\n            playbackRate: t.audioRate\n        }), this.plugins = [], this.decodedData = null, this.stopAtPosition = null, this.subscriptions = [], this.mediaSubscriptions = [], this.abortController = null, this.options = Object.assign({}, c, t), this.timer = new l;\n        const i = e ? void 0 : this.getMediaElement();\n        this.renderer = new h(this.options, i), this.initPlayerEvents(), this.initRendererEvents(), this.initTimerEvents(), this.initPlugins();\n        const s = this.options.url || this.getSrc() || \"\";\n        Promise.resolve().then(()=>{\n            this.emit(\"init\");\n            const { peaks: t, duration: e } = this.options;\n            (s || t && e) && this.load(s, t, e).catch(()=>null);\n        });\n    }\n    updateProgress(t = this.getCurrentTime()) {\n        return this.renderer.renderProgress(t / this.getDuration(), this.isPlaying()), t;\n    }\n    initTimerEvents() {\n        this.subscriptions.push(this.timer.on(\"tick\", ()=>{\n            if (!this.isSeeking()) {\n                const t = this.updateProgress();\n                this.emit(\"timeupdate\", t), this.emit(\"audioprocess\", t), null != this.stopAtPosition && this.isPlaying() && t >= this.stopAtPosition && this.pause();\n            }\n        }));\n    }\n    initPlayerEvents() {\n        this.isPlaying() && (this.emit(\"play\"), this.timer.start()), this.mediaSubscriptions.push(this.onMediaEvent(\"timeupdate\", ()=>{\n            const t = this.updateProgress();\n            this.emit(\"timeupdate\", t);\n        }), this.onMediaEvent(\"play\", ()=>{\n            this.emit(\"play\"), this.timer.start();\n        }), this.onMediaEvent(\"pause\", ()=>{\n            this.emit(\"pause\"), this.timer.stop(), this.stopAtPosition = null;\n        }), this.onMediaEvent(\"emptied\", ()=>{\n            this.timer.stop(), this.stopAtPosition = null;\n        }), this.onMediaEvent(\"ended\", ()=>{\n            this.emit(\"timeupdate\", this.getDuration()), this.emit(\"finish\"), this.stopAtPosition = null;\n        }), this.onMediaEvent(\"seeking\", ()=>{\n            this.emit(\"seeking\", this.getCurrentTime());\n        }), this.onMediaEvent(\"error\", ()=>{\n            var t;\n            this.emit(\"error\", null !== (t = this.getMediaElement().error) && void 0 !== t ? t : new Error(\"Media error\")), this.stopAtPosition = null;\n        }));\n    }\n    initRendererEvents() {\n        this.subscriptions.push(this.renderer.on(\"click\", (t, e)=>{\n            this.options.interact && (this.seekTo(t), this.emit(\"interaction\", t * this.getDuration()), this.emit(\"click\", t, e));\n        }), this.renderer.on(\"dblclick\", (t, e)=>{\n            this.emit(\"dblclick\", t, e);\n        }), this.renderer.on(\"scroll\", (t, e, i, s)=>{\n            const n = this.getDuration();\n            this.emit(\"scroll\", t * n, e * n, i, s);\n        }), this.renderer.on(\"render\", ()=>{\n            this.emit(\"redraw\");\n        }), this.renderer.on(\"rendered\", ()=>{\n            this.emit(\"redrawcomplete\");\n        }), this.renderer.on(\"dragstart\", (t)=>{\n            this.emit(\"dragstart\", t);\n        }), this.renderer.on(\"dragend\", (t)=>{\n            this.emit(\"dragend\", t);\n        }));\n        {\n            let t;\n            this.subscriptions.push(this.renderer.on(\"drag\", (e)=>{\n                if (!this.options.interact) return;\n                let i;\n                this.renderer.renderProgress(e), clearTimeout(t), this.isPlaying() ? i = 0 : !0 === this.options.dragToSeek ? i = 200 : \"object\" == typeof this.options.dragToSeek && void 0 !== this.options.dragToSeek && (i = this.options.dragToSeek.debounceTime), t = setTimeout(()=>{\n                    this.seekTo(e);\n                }, i), this.emit(\"interaction\", e * this.getDuration()), this.emit(\"drag\", e);\n            }));\n        }\n    }\n    initPlugins() {\n        var t;\n        (null === (t = this.options.plugins) || void 0 === t ? void 0 : t.length) && this.options.plugins.forEach((t)=>{\n            this.registerPlugin(t);\n        });\n    }\n    unsubscribePlayerEvents() {\n        this.mediaSubscriptions.forEach((t)=>t()), this.mediaSubscriptions = [];\n    }\n    setOptions(t) {\n        this.options = Object.assign({}, this.options, t), t.duration && !t.peaks && (this.decodedData = i.createBuffer(this.exportPeaks(), t.duration)), t.peaks && t.duration && (this.decodedData = i.createBuffer(t.peaks, t.duration)), this.renderer.setOptions(this.options), t.audioRate && this.setPlaybackRate(t.audioRate), null != t.mediaControls && (this.getMediaElement().controls = t.mediaControls);\n    }\n    registerPlugin(t) {\n        return t._init(this), this.plugins.push(t), this.subscriptions.push(t.once(\"destroy\", ()=>{\n            this.plugins = this.plugins.filter((e)=>e !== t);\n        })), t;\n    }\n    getWrapper() {\n        return this.renderer.getWrapper();\n    }\n    getWidth() {\n        return this.renderer.getWidth();\n    }\n    getScroll() {\n        return this.renderer.getScroll();\n    }\n    setScroll(t) {\n        return this.renderer.setScroll(t);\n    }\n    setScrollTime(t) {\n        const e = t / this.getDuration();\n        this.renderer.setScrollPercentage(e);\n    }\n    getActivePlugins() {\n        return this.plugins;\n    }\n    loadAudio(e, s, n, r) {\n        return t(this, void 0, void 0, function*() {\n            var t;\n            if (this.emit(\"load\", e), !this.options.media && this.isPlaying() && this.pause(), this.decodedData = null, this.stopAtPosition = null, !s && !n) {\n                const i = this.options.fetchParams || {};\n                window.AbortController && !i.signal && (this.abortController = new AbortController, i.signal = null === (t = this.abortController) || void 0 === t ? void 0 : t.signal);\n                const n = (t)=>this.emit(\"loading\", t);\n                s = yield o.fetchBlob(e, n, i);\n                const r = this.options.blobMimeType;\n                r && (s = new Blob([\n                    s\n                ], {\n                    type: r\n                }));\n            }\n            this.setSrc(e, s);\n            const a = yield new Promise((t)=>{\n                const e = r || this.getDuration();\n                e ? t(e) : this.mediaSubscriptions.push(this.onMediaEvent(\"loadedmetadata\", ()=>t(this.getDuration()), {\n                    once: !0\n                }));\n            });\n            if (!e && !s) {\n                const t = this.getMediaElement();\n                t instanceof d && (t.duration = a);\n            }\n            if (n) this.decodedData = i.createBuffer(n, a || 0);\n            else if (s) {\n                const t = yield s.arrayBuffer();\n                this.decodedData = yield i.decode(t, this.options.sampleRate);\n            }\n            this.decodedData && (this.emit(\"decode\", this.getDuration()), this.renderer.render(this.decodedData)), this.emit(\"ready\", this.getDuration());\n        });\n    }\n    load(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            try {\n                return yield this.loadAudio(e, void 0, i, s);\n            } catch (t) {\n                throw this.emit(\"error\", t), t;\n            }\n        });\n    }\n    loadBlob(e, i, s) {\n        return t(this, void 0, void 0, function*() {\n            try {\n                return yield this.loadAudio(\"\", e, i, s);\n            } catch (t) {\n                throw this.emit(\"error\", t), t;\n            }\n        });\n    }\n    zoom(t) {\n        if (!this.decodedData) throw new Error(\"No audio loaded\");\n        this.renderer.zoom(t), this.emit(\"zoom\", t);\n    }\n    getDecodedData() {\n        return this.decodedData;\n    }\n    exportPeaks({ channels: t = 2, maxLength: e = 8e3, precision: i = 1e4 } = {}) {\n        if (!this.decodedData) throw new Error(\"The audio has not been decoded yet\");\n        const s = Math.min(t, this.decodedData.numberOfChannels), n = [];\n        for(let t = 0; t < s; t++){\n            const s = this.decodedData.getChannelData(t), r = [], o = s.length / e;\n            for(let t = 0; t < e; t++){\n                const e = s.slice(Math.floor(t * o), Math.ceil((t + 1) * o));\n                let n = 0;\n                for(let t = 0; t < e.length; t++){\n                    const i = e[t];\n                    Math.abs(i) > Math.abs(n) && (n = i);\n                }\n                r.push(Math.round(n * i) / i);\n            }\n            n.push(r);\n        }\n        return n;\n    }\n    getDuration() {\n        let t = super.getDuration() || 0;\n        return 0 !== t && t !== 1 / 0 || !this.decodedData || (t = this.decodedData.duration), t;\n    }\n    toggleInteraction(t) {\n        this.options.interact = t;\n    }\n    setTime(t) {\n        this.stopAtPosition = null, super.setTime(t), this.updateProgress(t), this.emit(\"timeupdate\", t);\n    }\n    seekTo(t) {\n        const e = this.getDuration() * t;\n        this.setTime(e);\n    }\n    play(e, i) {\n        const s = Object.create(null, {\n            play: {\n                get: ()=>super.play\n            }\n        });\n        return t(this, void 0, void 0, function*() {\n            return null != e && this.setTime(e), null != i && (this.media instanceof d ? this.media.stopAt(i) : this.stopAtPosition = i), s.play.call(this);\n        });\n    }\n    playPause() {\n        return t(this, void 0, void 0, function*() {\n            return this.isPlaying() ? this.pause() : this.play();\n        });\n    }\n    stop() {\n        this.pause(), this.setTime(0);\n    }\n    skip(t) {\n        this.setTime(this.getCurrentTime() + t);\n    }\n    empty() {\n        this.load(\"\", [\n            [\n                0\n            ]\n        ], .001);\n    }\n    setMediaElement(t) {\n        this.unsubscribePlayerEvents(), super.setMediaElement(t), this.initPlayerEvents();\n    }\n    exportImage() {\n        return t(this, arguments, void 0, function*(t = \"image/png\", e = 1, i = \"dataURL\") {\n            return this.renderer.exportImage(t, e, i);\n        });\n    }\n    destroy() {\n        var t;\n        this.emit(\"destroy\"), null === (t = this.abortController) || void 0 === t || t.abort(), this.plugins.forEach((t)=>t.destroy()), this.subscriptions.forEach((t)=>t()), this.unsubscribePlayerEvents(), this.timer.destroy(), this.renderer.destroy(), super.destroy();\n    }\n}\nu.BasePlugin = class extends e {\n    constructor(t){\n        super(), this.subscriptions = [], this.options = t;\n    }\n    onInit() {}\n    _init(t) {\n        this.wavesurfer = t, this.onInit();\n    }\n    destroy() {\n        this.emit(\"destroy\"), this.subscriptions.forEach((t)=>t());\n    }\n}, u.dom = r;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wavesurfer.js/dist/wavesurfer.esm.js\n");

/***/ })

};
;